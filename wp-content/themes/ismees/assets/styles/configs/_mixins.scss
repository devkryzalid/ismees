// This function calculate the clamp() with pixel values but WIHOUT px.
// Here, the screen range is set by default between 375px and 1400px.
@function clamp-calc($min-value, $max-value, $min-screen-width: 375, $max-screen-width: 1600) {
  $min-value-rem: $min-value / 16;
  $max-value-rem: $max-value / 16;
  $slope: ($max-value - $min-value) / ($max-screen-width - $min-screen-width);
  $y-axis-intersection: $min-value-rem - $slope * ($min-screen-width / 16);
  $slope-final: $slope * 100;
  $return-value: clamp(#{$min-value-rem}rem, #{$y-axis-intersection}rem + #{$slope-final}vw, #{$max-value-rem}rem);
  @return $return-value;
}

@mixin responsive-font($font-family, $font-weight, $min-font-size, $max-font-size, $min-line-height, $max-line-height, $text-transform: null, $letter-spacing: null, $color: null, $font-style: normal, $min-screen-width: 375, $max-screen-width: 1600) {
  font-family: $font-family;
  font-weight: $font-weight;
  font-size: clamp-calc($min-font-size, $max-font-size, $min-screen-width, $max-screen-width);
  line-height: clamp-calc($min-line-height, $max-line-height, $min-screen-width, $max-screen-width);
  text-transform: $text-transform;
  letter-spacing: $letter-spacing;
  color: $color;
  font-style: $font-style;
}

// transition
@mixin transition($transition) {
  transition: $transition;
  -o-transition: $transition;
  -moz-transition: $transition;
  -webkit-transition: $transition;
}

// transform
@mixin transform($transform) {
  transform: $transform;
  -o-transform: $transform;
  -ms-transform: $transform;
  -moz-transform: $transform;
  -webkit-transform: $transform;
}

// animation
@mixin animation($animation) {
  animation: #{$animation};   
  -o-animation: #{$animation};
  -moz-animation: #{$animation};
  -webkit-animation: #{$animation};
}

// Keyframes
@mixin keyframes($animation-name) {
  @keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//

@mixin fontSize($size, $line-height: null, $weight: null, $spacing: null) {
  font-size: $size;
  font-size: calculateRem($size);

  @if ($line-height) {
    line-height: #{$line-height};
    line-height: calculateRem($line-height);
  }

  @if ($weight) {
    font-weight: #{$weight};
  }

  @if ($spacing) {
    letter-spacing: #{$spacing};
  }
}

@mixin pseudoElement($position: absolute, $display: block, $content: '') {
  position: $position;
  display: $display;
  content: $content;
}

@mixin before($position: absolute, $display: block, $content: '') {
  &::before { @include pseudoElement($position, $display, $content) };
}

@mixin after($position: absolute, $display: block, $content: '') {
  &::after { @include pseudoElement($position, $display, $content) };
}

@function calculateRem($value)  {
  $value: calc($value / 16px * 1rem);
  @if ($value == 0rem) { $value: 0; }
  @return $value;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin flex($align: center, $justify: center, $direction: row, $gap: null) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  @if $gap { gap: $gap; }
}

@mixin grid($columns: 1, $gap: 0) {
  display: grid;
  @if (type_of($columns) == 'number') { grid-template-columns: repeat($columns, 1fr); }
  @else { grid-template-columns: $columns; }
  gap: $gap;
}

@mixin img($fit: cover) {
  width: 100%;
  height: 100%;
  object-fit: $fit;
}

@mixin icon($code, $fontSize: null) {
  @include pseudoElement();
  font-family: 'icomoon';
  content: $code;
  @if ($fontSize) { font-size: $fontSize; }
}

@mixin shadowHover($shadowSize: 15px, $offset: 15px, $color: $grey) {
  margin-top: $offset;
  box-shadow: $shadowSize $shadowSize 0 -$shadowSize $color;
  transition: $basicTransition;

  &:hover {
    margin-top: 0;
    padding-bottom: $offset * 2;
    box-shadow: $shadowSize $shadowSize 0 0 $color;
  }
}

@mixin position($top: null, $right: null, $bottom: null, $left: null) {
	@if ($top) { top: $top; }
	@if ($right) { right: $right; }
	@if ($bottom) { bottom: $bottom; }
	@if ($left) { left: $left; }
}

@mixin bgColor($regularBg: transparent, $textColor: false) {
	background-color: $regularBg;
	@if ($textColor) { color: $textColor !important; }
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}